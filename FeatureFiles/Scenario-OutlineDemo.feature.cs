// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD_Tutorial_classLib_newFramework.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scenario-OutlineDemo")]
    public partial class Scenario_OutlineDemoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Scenario-OutlineDemo.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Scenario-OutlineDemo", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new employee with mandatory fields for single set of data")]
        [NUnit.Framework.CategoryAttribute("mytag_singleSetOfData")]
        public virtual void CreateANewEmployeeWithMandatoryFieldsForSingleSetOfData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new employee with mandatory fields for single set of data", null, new string[] {
                        "mytag_singleSetOfData"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Phone",
                        "Email"});
            table1.AddRow(new string[] {
                        "Kartik",
                        "25",
                        "9851638768",
                        "kartiktkrroy@fb.com"});
#line 11
 testRunner.When("I fill all the mandatory details in form", ((string)(null)), table1, "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new employee with mandatory fields for multiplse Set of Data")]
        [NUnit.Framework.CategoryAttribute("mytag_multipleSetOfData")]
        public virtual void CreateANewEmployeeWithMandatoryFieldsForMultiplseSetOfData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new employee with mandatory fields for multiplse Set of Data", null, new string[] {
                        "mytag_multipleSetOfData"});
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Phone",
                        "Email"});
            table2.AddRow(new string[] {
                        "Kartik",
                        "25",
                        "9851638768",
                        "kartiktkrroy@fb.com"});
            table2.AddRow(new string[] {
                        "Rohit",
                        "25",
                        "9851000768",
                        "rohitkrroy@fb.com"});
            table2.AddRow(new string[] {
                        "Smart",
                        "25",
                        "9851688868",
                        "smarty@fb.com"});
#line 22
 testRunner.When("I fill all the mandatory details in form with multiple Data", ((string)(null)), table2, "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new employee with mandatory fields for multiplse Set of Data using Specf" +
            "low_Assist_Dynamics")]
        [NUnit.Framework.CategoryAttribute("mytag_multipleSetOfData_UsingSpecflowAssistDynamics")]
        public virtual void CreateANewEmployeeWithMandatoryFieldsForMultiplseSetOfDataUsingSpecflow_Assist_Dynamics()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new employee with mandatory fields for multiplse Set of Data using Specf" +
                    "low_Assist_Dynamics", null, new string[] {
                        "mytag_multipleSetOfData_UsingSpecflowAssistDynamics"});
#line 32
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Age",
                        "Phone",
                        "Email"});
            table3.AddRow(new string[] {
                        "Kartik",
                        "25",
                        "9851638768",
                        "kartiktkrroy@fb.com"});
            table3.AddRow(new string[] {
                        "Rohit",
                        "25",
                        "9851000768",
                        "rohitkrroy@fb.com"});
            table3.AddRow(new string[] {
                        "Smart",
                        "25",
                        "9851688868",
                        "smarty@fb.com"});
#line 35
 testRunner.When("I fill all the mandatory details in form with multiple Data using Specflow_Assist" +
                    "_Dynamics", ((string)(null)), table3, "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new employee with mandatory fields for different iterations")]
        [NUnit.Framework.TestCaseAttribute("Kartik", "25", "9851638768", null)]
        [NUnit.Framework.TestCaseAttribute("Rohit", "25", "9851000768", null)]
        [NUnit.Framework.TestCaseAttribute("Smart", "25", "9851688868", null)]
        public virtual void CreateANewEmployeeWithMandatoryFieldsForDifferentIterations(string name, string age, string phone, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new employee with mandatory fields for different iterations", null, exampleTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 48
 testRunner.When(string.Format("I fill all the mandatory details in form {0},{1} and {2}", name, age, phone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

